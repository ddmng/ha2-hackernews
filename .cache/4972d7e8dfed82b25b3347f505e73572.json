{"id":"utils/squirrel.js","dependencies":[{"name":"/home/daneel/Sources/github/ha2-hackernews/package.json","includedInParent":true,"mtime":1536352218374},{"name":"/home/daneel/Sources/github/ha2-hackernews/.babelrc","includedInParent":true,"mtime":1536351542001}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = squirrel;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }\n\n/*\n  \n  Squirrel helps you work with data held in deeply nested objects\n  \n  It creates a mapping based on a given `path`. The mapping transforms a unary function `f`\n  into a function that applies f to the given path of a given object.\n  \n  The path is given as a string, with each nesting level separated by a '.' \n  \n  Some examples:\n  \n  ```\n  const increment = x => x + 1\n  const fooMap = squirrel('foo')\n  const incrementFoo = fooMap(increment)\n  incrementFoo({foo: 1, bar:1}) // returns: {foo: 2, bar:1}\n  ```\n  Paths are not limited to one level deep:\n  ```\n  const valueMap = squirrel('foo.bar.value')\n  const incrementValue = valueMap(x => x + 1)\n  incrementValue({foo: {bar: {value: 1}, baz: 1}})\n    // returns: {foo: {bar: {value: 2}, baz: 1}}\n  ```\n  \n  Your path can build on a previously existing mapping:\n  \n  ```\n  const data = {\n    foo: {\n      doors: {\n        'front': 'closed',\n        'back': 'open',\n        'garage': 'closed',\n      }\n    }\n  }\n  const doorMap = squirrel('foo.doors')\n  const setDoorOpen = (doorId, data) => squirrel(doorId, doorMap)(_ => 'open')(data)\n  setDoorOpen('front', data)\n    // returns {foo: {doors: {front: 'open', ...}}}\n  ```\n  Why \"Squirrel\" ?\n  â€“ Squirrels run up (data-)trees with acorns (=new data) to put in specific places\n  ...what *you* call it is up to you of course ;)\n  \n*/\n\nfunction squirrel(path, map) {\n  var _ref = Array.isArray(path) ? path : path.split('.').reverse(),\n      _ref2 = _toArray(_ref),\n      key = _ref2[0],\n      rest = _ref2.slice(1);\n\n  if (rest.length) map = squirrel(rest, map);\n  var F = function F(f) {\n    return function (x) {\n      return _extends({}, x, _defineProperty({}, key, f(x[key])));\n    };\n  };\n  return map ? function (x) {\n    return map(F(x));\n  } : F;\n}","map":{"mappings":[{"name":"squirrel","generated":{"line":9,"column":18},"source":"utils/squirrel.js","original":{"line":49,"column":24}},{"generated":{"line":15,"column":0},"source":"utils/squirrel.js","original":{"line":1,"column":0}},{"generated":{"line":63,"column":0},"source":"utils/squirrel.js","original":{"line":49,"column":15}},{"name":"squirrel","generated":{"line":63,"column":9},"source":"utils/squirrel.js","original":{"line":49,"column":24}},{"generated":{"line":63,"column":17},"source":"utils/squirrel.js","original":{"line":49,"column":15}},{"name":"path","generated":{"line":63,"column":18},"source":"utils/squirrel.js","original":{"line":49,"column":34}},{"generated":{"line":63,"column":22},"source":"utils/squirrel.js","original":{"line":49,"column":15}},{"name":"map","generated":{"line":63,"column":24},"source":"utils/squirrel.js","original":{"line":49,"column":40}},{"generated":{"line":63,"column":27},"source":"utils/squirrel.js","original":{"line":49,"column":15}},{"generated":{"line":63,"column":29},"source":"utils/squirrel.js","original":{"line":49,"column":45}},{"generated":{"line":64,"column":0},"source":"utils/squirrel.js","original":{"line":49,"column":45}},{"name":"Array","generated":{"line":64,"column":13},"source":"utils/squirrel.js","original":{"line":50,"column":27}},{"name":"isArray","generated":{"line":64,"column":19},"source":"utils/squirrel.js","original":{"line":50,"column":33}},{"generated":{"line":64,"column":26},"source":"utils/squirrel.js","original":{"line":50,"column":27}},{"name":"path","generated":{"line":64,"column":27},"source":"utils/squirrel.js","original":{"line":50,"column":41}},{"generated":{"line":64,"column":31},"source":"utils/squirrel.js","original":{"line":50,"column":27}},{"name":"path","generated":{"line":64,"column":35},"source":"utils/squirrel.js","original":{"line":50,"column":49}},{"generated":{"line":64,"column":39},"source":"utils/squirrel.js","original":{"line":50,"column":27}},{"name":"path","generated":{"line":64,"column":42},"source":"utils/squirrel.js","original":{"line":50,"column":56}},{"name":"split","generated":{"line":64,"column":47},"source":"utils/squirrel.js","original":{"line":50,"column":61}},{"generated":{"line":64,"column":52},"source":"utils/squirrel.js","original":{"line":50,"column":56}},{"generated":{"line":64,"column":53},"source":"utils/squirrel.js","original":{"line":50,"column":67}},{"generated":{"line":64,"column":56},"source":"utils/squirrel.js","original":{"line":50,"column":56}},{"name":"reverse","generated":{"line":64,"column":58},"source":"utils/squirrel.js","original":{"line":50,"column":72}},{"generated":{"line":64,"column":65},"source":"utils/squirrel.js","original":{"line":50,"column":56}},{"generated":{"line":64,"column":67},"source":"utils/squirrel.js","original":{"line":49,"column":45}},{"generated":{"line":65,"column":0},"source":"utils/squirrel.js","original":{"line":49,"column":45}},{"generated":{"line":66,"column":0},"source":"utils/squirrel.js","original":{"line":49,"column":45}},{"name":"key","generated":{"line":66,"column":6},"source":"utils/squirrel.js","original":{"line":50,"column":11}},{"generated":{"line":66,"column":9},"source":"utils/squirrel.js","original":{"line":49,"column":45}},{"generated":{"line":67,"column":0},"source":"utils/squirrel.js","original":{"line":49,"column":45}},{"name":"rest","generated":{"line":67,"column":6},"source":"utils/squirrel.js","original":{"line":50,"column":19}},{"generated":{"line":67,"column":10},"source":"utils/squirrel.js","original":{"line":49,"column":45}},{"generated":{"line":69,"column":0},"source":"utils/squirrel.js","original":{"line":51,"column":4}},{"name":"rest","generated":{"line":69,"column":6},"source":"utils/squirrel.js","original":{"line":51,"column":8}},{"name":"length","generated":{"line":69,"column":11},"source":"utils/squirrel.js","original":{"line":51,"column":13}},{"generated":{"line":69,"column":17},"source":"utils/squirrel.js","original":{"line":51,"column":4}},{"name":"map","generated":{"line":69,"column":19},"source":"utils/squirrel.js","original":{"line":51,"column":21}},{"name":"squirrel","generated":{"line":69,"column":25},"source":"utils/squirrel.js","original":{"line":51,"column":27}},{"name":"rest","generated":{"line":69,"column":34},"source":"utils/squirrel.js","original":{"line":51,"column":36}},{"generated":{"line":69,"column":38},"source":"utils/squirrel.js","original":{"line":51,"column":27}},{"name":"map","generated":{"line":69,"column":40},"source":"utils/squirrel.js","original":{"line":51,"column":42}},{"generated":{"line":69,"column":43},"source":"utils/squirrel.js","original":{"line":51,"column":27}},{"generated":{"line":69,"column":44},"source":"utils/squirrel.js","original":{"line":51,"column":21}},{"generated":{"line":70,"column":0},"source":"utils/squirrel.js","original":{"line":52,"column":4}},{"name":"F","generated":{"line":70,"column":6},"source":"utils/squirrel.js","original":{"line":52,"column":10}},{"generated":{"line":70,"column":10},"source":"utils/squirrel.js","original":{"line":52,"column":14}},{"name":"F","generated":{"line":70,"column":19},"source":"utils/squirrel.js","original":{"line":52,"column":10}},{"generated":{"line":70,"column":20},"source":"utils/squirrel.js","original":{"line":52,"column":14}},{"generated":{"line":71,"column":0},"source":"utils/squirrel.js","original":{"line":52,"column":14}},{"generated":{"line":71,"column":11},"source":"utils/squirrel.js","original":{"line":52,"column":19}},{"generated":{"line":72,"column":0},"source":"utils/squirrel.js","original":{"line":52,"column":19}},{"name":"x","generated":{"line":72,"column":26},"source":"utils/squirrel.js","original":{"line":52,"column":29}},{"generated":{"line":72,"column":27},"source":"utils/squirrel.js","original":{"line":52,"column":19}},{"name":"key","generated":{"line":72,"column":49},"source":"utils/squirrel.js","original":{"line":52,"column":33}},{"generated":{"line":72,"column":52},"source":"utils/squirrel.js","original":{"line":52,"column":19}},{"name":"f","generated":{"line":72,"column":54},"source":"utils/squirrel.js","original":{"line":52,"column":39}},{"name":"x","generated":{"line":72,"column":56},"source":"utils/squirrel.js","original":{"line":52,"column":41}},{"name":"key","generated":{"line":72,"column":58},"source":"utils/squirrel.js","original":{"line":52,"column":43}},{"generated":{"line":72,"column":61},"source":"utils/squirrel.js","original":{"line":52,"column":41}},{"generated":{"line":72,"column":62},"source":"utils/squirrel.js","original":{"line":52,"column":39}},{"generated":{"line":72,"column":63},"source":"utils/squirrel.js","original":{"line":52,"column":19}},{"generated":{"line":73,"column":0},"source":"utils/squirrel.js","original":{"line":52,"column":19}},{"generated":{"line":73,"column":5},"source":"utils/squirrel.js","original":{"line":52,"column":14}},{"generated":{"line":74,"column":0},"source":"utils/squirrel.js","original":{"line":52,"column":14}},{"generated":{"line":74,"column":3},"source":"utils/squirrel.js","original":{"line":52,"column":4}},{"generated":{"line":75,"column":0},"source":"utils/squirrel.js","original":{"line":53,"column":4}},{"name":"map","generated":{"line":75,"column":9},"source":"utils/squirrel.js","original":{"line":53,"column":11}},{"generated":{"line":75,"column":15},"source":"utils/squirrel.js","original":{"line":53,"column":17}},{"generated":{"line":76,"column":0},"source":"utils/squirrel.js","original":{"line":53,"column":17}},{"name":"map","generated":{"line":76,"column":11},"source":"utils/squirrel.js","original":{"line":53,"column":22}},{"name":"F","generated":{"line":76,"column":15},"source":"utils/squirrel.js","original":{"line":53,"column":26}},{"name":"x","generated":{"line":76,"column":17},"source":"utils/squirrel.js","original":{"line":53,"column":28}},{"generated":{"line":76,"column":18},"source":"utils/squirrel.js","original":{"line":53,"column":26}},{"generated":{"line":76,"column":19},"source":"utils/squirrel.js","original":{"line":53,"column":22}},{"generated":{"line":76,"column":20},"source":"utils/squirrel.js","original":{"line":53,"column":17}},{"generated":{"line":77,"column":0},"source":"utils/squirrel.js","original":{"line":53,"column":17}},{"generated":{"line":77,"column":3},"source":"utils/squirrel.js","original":{"line":53,"column":11}},{"name":"F","generated":{"line":77,"column":6},"source":"utils/squirrel.js","original":{"line":53,"column":34}},{"generated":{"line":77,"column":7},"source":"utils/squirrel.js","original":{"line":53,"column":4}},{"generated":{"line":78,"column":0},"source":"utils/squirrel.js","original":{"line":54,"column":1}}],"sources":{"utils/squirrel.js":"/*\n  \n  Squirrel helps you work with data held in deeply nested objects\n  \n  It creates a mapping based on a given `path`. The mapping transforms a unary function `f`\n  into a function that applies f to the given path of a given object.\n  \n  The path is given as a string, with each nesting level separated by a '.' \n  \n  Some examples:\n  \n  ```\n  const increment = x => x + 1\n  const fooMap = squirrel('foo')\n  const incrementFoo = fooMap(increment)\n  incrementFoo({foo: 1, bar:1}) // returns: {foo: 2, bar:1}\n  ```\n  Paths are not limited to one level deep:\n  ```\n  const valueMap = squirrel('foo.bar.value')\n  const incrementValue = valueMap(x => x + 1)\n  incrementValue({foo: {bar: {value: 1}, baz: 1}})\n    // returns: {foo: {bar: {value: 2}, baz: 1}}\n  ```\n  \n  Your path can build on a previously existing mapping:\n  \n  ```\n  const data = {\n    foo: {\n      doors: {\n        'front': 'closed',\n        'back': 'open',\n        'garage': 'closed',\n      }\n    }\n  }\n  const doorMap = squirrel('foo.doors')\n  const setDoorOpen = (doorId, data) => squirrel(doorId, doorMap)(_ => 'open')(data)\n  setDoorOpen('front', data)\n    // returns {foo: {doors: {front: 'open', ...}}}\n  ```\n  Why \"Squirrel\" ?\n  â€“ Squirrels run up (data-)trees with acorns (=new data) to put in specific places\n  ...what *you* call it is up to you of course ;)\n  \n*/\n\nexport default function squirrel (path, map) {\n    const [key, ...rest] = Array.isArray(path) ? path : path.split('.').reverse()\n    if (rest.length) map = squirrel(rest, map)\n    const F = f => x => ({...x, [key]: f(x[key])})\n    return map ? x => map(F(x)) : F\n}\n"},"lineCount":null}},"hash":"07ccc2495ad643cff2fdf7ae03526451","cacheData":{"env":{}}}